name: CI

on:
  push:
    tags:
      - '*'
    branches:
      - main
      - staging
  # pull_request: {}
  workflow_dispatch:
    inputs:
      number_of_agents:
        description: Number of Agents
        required: true
        type: string
        default: '4'
    secrets:
      VERCEL_SCOPE:
        required: true
      VERCEL_TOKEN:
        required: true
      VERCEL_ORG_ID:
        required: true
      VERCEL_PROJECT_ID_API:
        required: true
      VERCEL_PROJECT_ID_WEB:
        required: true

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  NEXT_PUBLIC_NODE_ENV: development
  NEXT_PUBLIC_TRIGGER_PUBLIC_API_KEY: trg_1234567890

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    steps:
      - name: Setup Chrome
        uses: browser-actions/setup-chrome@latest

  agents:
    name: Nx Cloud - Agents
    uses: nrwl/ci/.github/workflows/nx-cloud-agents.yml@v0.11
    with:
      number-of-agents: ${{ github.event.inputs.number_of_agents == '' && 4 || fromJSON(github.event.inputs.number_of_agents) }}

  test:
    name: Test
    uses: nrwl/ci/.github/workflows/nx-cloud-main.yml@v0.11
    with:
      number-of-agents: ${{ github.event.inputs.number_of_agents == '' && 4 || fromJSON(github.event.inputs.number_of_agents) }}
      parallel-commands: |
        pnpm nx-cloud record -- pnpm lint:root
        pnpm nx-cloud record -- pnpm nx format:check --all
      parallel-commands-on-agents: |
        pnpm nx affected --target=lint --parallel=${{ github.event.inputs.number_of_agents == '' && 4 || fromJSON(github.event.inputs.number_of_agents) }}
        pnpm nx affected --target=test --parallel=${{ github.event.inputs.number_of_agents == '' && 4 || fromJSON(github.event.inputs.number_of_agents) }}
        pnpm nx affected --target=build --parallel=${{ github.event.inputs.number_of_agents == '' && 4 || fromJSON(github.event.inputs.number_of_agents) }}
        pnpm nx affected --target=typecheck --parallel=${{ github.event.inputs.number_of_agents == '' && 4 || fromJSON(github.event.inputs.number_of_agents) }}

  deploy:
    name: Deploy
    # needs: [test, agents]
    timeout-minutes: 10
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.draft != true && !contains(github.event.head_commit.message, 'skip deploy') }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Setup SHA
        uses: rlespinasse/github-slug-action@v4
      - name: Setup Node
        uses: actions/setup-node@v3
        with: { node-version: '18.x' }
      - name: Setup Volta
        uses: volta-cli/action@v4
      - name: Setup PNPM
        id: pnpm-install
        uses: pnpm/action-setup@v2
        with: { run_install: false }
      - name: Get PNPM Store Path
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        name: Setup PNPM cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install Dependencies
        run: pnpm install --frozen-lockfile --strict-peer-dependencies
      ##########################################################################
      - name: Build Preview Distribution
        if: ${{ github.ref != 'refs/heads/staging' && github.ref != 'refs/heads/main' }}
        run: pnpm build:stg && pnpm postbuild
      - name: Build Staging Distribution
        if: ${{ github.ref == 'refs/heads/staging' }}
        run: pnpm build:stg && pnpm postbuild
      - name: Build Production Distribution
        if: ${{ github.ref == 'refs/heads/main' }}
        run: pnpm build && pnpm postbuild
      ##########################################################################
      - name: Deploy Preview
        if: ${{ github.ref != 'refs/heads/staging' && github.ref != 'refs/heads/main' }}
        uses: amondnet/vercel-action@feature/deployment
        with:
          working-directory: ./
          github-deployment: true
          vercel-args: --force --debug
          github-deployment-environment: Preview
          alias-domains: pr-{{PR_NUMBER}}-sportsfi-dev.daedalusbuild.com
          scope: ${{ secrets.VERCEL_SCOPE }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_WEB }}
      - name: Deploy Staging
        if: ${{ github.ref == 'refs/heads/staging' }}
        uses: amondnet/vercel-action@feature/deployment
        with:
          working-directory: ./
          github-deployment: true
          vercel-args: --force --debug
          github-deployment-environment: Staging
          alias-domains: sportsfi-stg.daedalusbuild.com
          scope: ${{ secrets.VERCEL_SCOPE }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_WEB }}
      - name: Deploy Production
        uses: amondnet/vercel-action@feature/deployment
        if: ${{ github.ref == 'refs/heads/main' }}
        with:
          working-directory: ./
          github-deployment: true
          vercel-args: --force --debug --prod
          github-deployment-environment: Production
          alias-domains: sportsfi.daedalusbuild.com
          scope: ${{ secrets.VERCEL_SCOPE }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_WEB }}
